import telebot
from dotenv import load_dotenv
import os
from telebot import types
from db import SQL


db = SQL()
load_dotenv()
bot = telebot.TeleBot(os.environ['TG_TOKEN'])
creator_chat_id = os.environ['CREATOR_CHAT_ID']
payment_token = os.environ['PAYMENT_TOKEN']
add_section_val = False
admin = False
section = ''
add_new = ''
product = []
promo = []
promocodes_users = []


@bot.callback_query_handler(func=lambda c: 'set-adm_' in c.data)
def settings_section(message):
    global section
    bot.delete_message(message.message.chat.id, message.message.message_id)
    all_results = db.get_products_section(int(message.data.replace("set-adm_", "")))
    
    markup = types.InlineKeyboardMarkup()
    delete = types.InlineKeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'delete_category_{message.data.replace("set-adm_", "")}')
    add = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'add_product_in_{message.data.replace("set-adm_", "")}')
    markup.add(delete, add)
    for product in all_results:
        button1 = types.InlineKeyboardButton(product[1], callback_data=f'product_set_{product[0]}')
        markup.add(button1)
    go_home = types.InlineKeyboardButton('‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data='cancel_section')
    markup.add(go_home)
    section = db.get_section(message.data.replace('set-adm_', ''))
    bot.send_message(message.message.chat.id, f'–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{section[0]}"', reply_markup=markup)
    bot.answer_callback_query(message.id)

    
@bot.message_handler(content_types=['text'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and m.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞')
def admin_func(message):
    global admin
    admin = True
    markup = types.InlineKeyboardMarkup()
    promo = types.InlineKeyboardButton('–ü—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='promo')
    cat = types.InlineKeyboardButton('–¢–æ–≤–∞—Ä—ã', callback_data='sections')
    markup.add(promo)
    markup.row()
    markup.add(cat)
    markup.row()
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    bot.send_message(message.chat.id, '–≠—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞!', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data == 'promo')
def set_promo(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    markup = types.InlineKeyboardMarkup()
    promocodes = db.get_all_promocodes()
    new = types.InlineKeyboardButton('‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='new_promo')
    markup.add(new)
    for i in promocodes:
        markup.add(types.InlineKeyboardButton(f'{i[1]}, {i[2]}', callback_data=f'del_promo_{i[0]}'))
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    bot.send_message(message.message.chat.id, '–í–æ—Ç –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: 'del_promo_' in c.data)
def del_promo(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    id_promo = int(message.data.replace('del_promo_', ''))
    promo_title = db.delete_promo(id_promo)
    markup = types.InlineKeyboardMarkup()
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    bot.send_message(message.message.chat.id, f'–ü—Ä–æ–º–æ–∫–æ–¥ {promo_title} —É–¥–∞–ª—ë–Ω!', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data == 'new_promo')
def create_promo(message):
    global promo, add_new
    bot.delete_message(message.message.chat.id, message.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_product'))
    promo = []
    add_new = 'title'
    bot.send_message(message.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:', reply_markup=markup)
    

@bot.message_handler(content_types=['text'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and 'title' in add_new)
def new_price(message):
    global promo, add_new
    promo.append(message.text)
    add_new = 'price'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_product'))
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and 'price' in add_new)
def yes_create_promo(message):
    global promo, add_new
    promo.append(int(message.text))
    add_new = ''
    db.create_promocode(promo[0], promo[1])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='cancel_product'))
    bot.send_message(message.chat.id, f'–°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ {promo[0]}', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data == 'sections')
def set_cat(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    global admin
    admin = True
    markup = types.InlineKeyboardMarkup()
    sections = db.get_all_sections()
    new = types.InlineKeyboardButton('‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='new_section')
    markup.add(new)
    for section in sections:
        b1 = types.InlineKeyboardButton(section[0], callback_data=f'set-adm_{section[1]}')
        markup.add(b1)
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    bot.send_message(message.message.chat.id, '–í–æ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: c.data == 'new_section')
def add_section(message):
    global add_section_val
    bot.delete_message(message.message.chat.id, message.message.message_id)
    add_section_val = True
    markup = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_section')
    markup.add(cancel)
    bot.send_message(message.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=markup)
    bot.answer_callback_query(message.id)


@bot.callback_query_handler(func=lambda c: 'product_set_' in c.data)
def delete_product(message):
    markup = types.InlineKeyboardMarkup()
    product = db.get_info_about_product(message.data.replace("product_set_", ""))
    bot.delete_message(message.message.chat.id, message.message.message_id)
    yes = types.InlineKeyboardButton('‚úÖ', callback_data=f'yes_product_{message.data.replace("product_set_", "")}')
    no = types.InlineKeyboardButton('‚ùå', callback_data=f'no_product_{message.data.replace("product_set_", "")}')
    markup.add(yes, no)
    bot.send_message(message.message.chat.id, f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "{product[1]}', reply_markup=markup)
    bot.answer_callback_query(message.id)


@bot.callback_query_handler(func=lambda c: 'yes_product_' in c.data)
def delete(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    global admin
    admin = False
    markup = types.InlineKeyboardMarkup()
    go_home = types.InlineKeyboardButton('‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data='cancel_section')
    markup.add(go_home)
    product = db.get_info_about_product(message.data.replace("yes_product_", ""))
    os.remove(product[7])
    db.delete_product(message.data.replace("yes_product_", ""))
    users = db.get_all_users()
    for user in users:
        buy = user[2].split('; ')
        if f'{message.data.replace("yes_product_", "")}' in buy:
            buy.remove(f'{message.data.replace("yes_product_", "")}')
        db.update_user_buy('; '.join(buy), user[0])
    bot.send_message(message.message.chat.id, f'–¢–æ–≤–∞—Ä "{product[1]}" —É–¥–∞–ª—ë–Ω!', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: 'no_product_' in c.data)
def cancel_delete(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    global admin
    admin = False
    product = db.get_info_about_product(message.data.replace("no_product_", ""))
    markup = types.InlineKeyboardMarkup()
    go_home = types.InlineKeyboardButton('‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data='cancel_section')
    markup.add(go_home)
    bot.send_message(message.message.chat.id, f'–¢–æ–≤–∞—Ä "{product[1]}" –Ω–µ —É–¥–∞–ª—ë–Ω!', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: 'delete_category_' in c.data)
def delete_category(message):
    markup = types.InlineKeyboardMarkup()
    bot.delete_message(message.message.chat.id, message.message.message_id)
    category = db.get_section(message.data.replace("delete_category_", ""))
    yes = types.InlineKeyboardButton('‚úÖ', callback_data=f'yes_category_{message.data.replace("delete_category_", "")}')
    no = types.InlineKeyboardButton('‚ùå', callback_data=f'no_category_{message.data.replace("delete_category_", "")}')
    markup.add(yes, no)
    bot.send_message(message.message.chat.id, f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category[0]} –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–º–∏ –µ–π —Ç–æ–≤–∞—Ä–∞–º–∏?', reply_markup=markup)
    bot.answer_callback_query(message.id)


@bot.callback_query_handler(func=lambda c: 'cancel_product' in c.data)
def cancel_product(message):
    global add_new, product, promo
    add_new = ''
    product = []
    promo = []
    bot.delete_message(message.message.chat.id, message.message.message_id)
    global admin
    admin = True
    markup = types.InlineKeyboardMarkup()
    promo = types.InlineKeyboardButton('–ü—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='promo')
    cat = types.InlineKeyboardButton('–¢–æ–≤–∞—Ä—ã', callback_data='sections')
    markup.add(promo)
    markup.row()
    markup.add(cat)
    markup.row()
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    bot.send_message(message.message.chat.id, '–≠—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞!', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: 'add_product_in_' in c.data)
def add_new_product(message):
    global add_new, product
    markup = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_product')
    markup.add(cancel)
    bot.delete_message(message.message.chat.id, message.message.message_id)
    add_new = f'–ù–∞–∑–≤–∞–Ω–∏–µ_{message.data.replace("add_product_in_", "")}'
    bot.send_message(message.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and "–ù–∞–∑–≤–∞–Ω–∏–µ_" in add_new)
def name(message):
    global add_new, product
    # bot.delete_message(message.chat.id, message.message_id)
    markup = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_product')
    markup.add(cancel)
    add_new = f'–û–ø–∏—Å–∞–Ω–∏–µ_{add_new.replace("–ù–∞–∑–≤–∞–Ω–∏–µ_", "")}'
    product.append(message.text)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and '–û–ø–∏—Å–∞–Ω–∏–µ_' in add_new)
def description(message):
    global add_new, product
    add_new = f'–°—Å—ã–ª–∫–∞_{add_new.replace("–û–ø–∏—Å–∞–Ω–∏–µ_", "")}'
    # bot.delete_message(message.chat.id, message.message_id)
    markup = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_product')
    markup.add(cancel)
    product.append(message.text)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and '–°—Å—ã–ª–∫–∞_' in add_new)
def link(message):
    global add_new, product
    add_new = f'C_–¶–µ–Ω–∞_{add_new.replace("–°—Å—ã–ª–∫–∞_", "")}'
    # bot.delete_message(message.chat.id, message.message_id)
    markup = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_product')
    markup.add(cancel)
    product.append(message.text)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É –Ω–∞ –∫—É—Ä—Å (–≤ —Ä—É–±–ª—è—Ö)', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and 'C_–¶–µ–Ω–∞_' in add_new)
def old_price(message):
    global add_new, product
    add_new = f'–ù_–¶–µ–Ω–∞_{add_new.replace("C_–¶–µ–Ω–∞_", "")}'
    # bot.delete_message(message.chat.id, message.message_id)
    markup = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_product')
    markup.add(cancel)
    product.append(message.text)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –Ω–∞ –∫—É—Ä—Å (–≤ —Ä—É–±–ª—è—Ö)', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and '–ù_–¶–µ–Ω–∞_' in add_new)
def new_price(message):
    global add_new, product
    # bot.delete_message(message.chat.id, message.message_id)
    add_new = f'Image_{add_new.replace("–ù_–¶–µ–Ω–∞_", "")}'
    markup = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel_product')
    markup.add(cancel)
    product.append(int(message.text))
    product.append(add_new.replace('Image_', ''))
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∫—É—Ä—Å–∞', reply_markup=markup)


@bot.message_handler(content_types=['photo'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and 'Image_' in add_new)
def image(message):
    global add_new, product
    markup = types.InlineKeyboardMarkup()
    # bot.delete_message(message.chat.id, message.message_id)
    yes = types.InlineKeyboardButton('‚úÖ', callback_data=f'add')
    no = types.InlineKeyboardButton('‚ùå', callback_data=f'not_add')
    markup.add(yes, no)
    file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    src = f'./images/{product[0]}.jpg'
    product.append(src)
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)
    add_new = '–û–∫'
    bot.send_message(message.chat.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product[0]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product[1]}\n–°—Å—ã–ª–∫–∞: {product[2]}\n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {product[3]} —Ä—É–±.\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {product[4]} —Ä—É–±.', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: '–û–∫' in add_new)
def ok(message):
    global add_new, product, admin
    add_new = ''
    bot.delete_message(message.message.chat.id, message.message.message_id)
    admin = False
    markup = types.InlineKeyboardMarkup()
    go_home = types.InlineKeyboardButton('‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data='cancel_section')
    markup.add(go_home)
    if message.data == 'add':
        db.add_product(product)
        bot.send_message(message.message.chat.id, '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=markup)
        product = []
    else:
        bot.send_message(message.message.chat.id, '–¢–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=markup)
        product = []
    bot.answer_callback_query(message.id)


@bot.callback_query_handler(func=lambda c: 'yes_category_' in c.data)
def delete_category(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    name = db.get_section(str(message.data).replace('yes_category_', ''))
    markup = types.InlineKeyboardMarkup()
    go_home = types.InlineKeyboardButton('‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data='cancel_section')
    markup.add(go_home)
    db.delete_section(name[1])
    all_results = db.get_products_section(name[1])
    count = 0
    for product in all_results:
        users = db.get_all_users()
        for user in users:
            buy = user[2].split('; ')
            if product[0] in buy:
                buy.remove(product[0])
            db.update_user_buy('; '.join(buy), user[0])
        db.delete_product(product[0])
        count += 1
    bot.send_message(message.message.chat.id, f'–£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "{name[0]} –∏ {count} —à—Ç —Ç–æ–≤–∞—Ä–æ–≤!', reply_markup=markup)
    bot.answer_callback_query(message.id)


@bot.callback_query_handler(func=lambda c: 'no_category_' in c.data)
def delete_category(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    markup = types.InlineKeyboardMarkup()
    go_home = types.InlineKeyboardButton('‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data='cancel_section')
    markup.add(go_home)
    bot.send_message(message.message.chat.id, f'–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup)
    bot.answer_callback_query(message.id)


@bot.message_handler(content_types=['text'], func=lambda m: str(m.chat.id) == str(creator_chat_id) and add_section_val)
def correct_section(message):
    db.create_section(message.text)
    markup = types.InlineKeyboardMarkup()
    global add_section_val
    add_section_val = False
    go_home = types.InlineKeyboardButton('‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data='cancel_section')
    markup.add(go_home)
    bot.send_message(message.chat.id, f'–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –∏–º–µ–Ω–µ–º {message.text}!', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    all_results = db.get_all_users()
    all_users = [i[0] for i in all_results]
    if message.chat.id not in all_users:
        if len(message.text.split(' ')) == 2:
            markup = types.InlineKeyboardMarkup()
            close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
            markup.add(close)
            ref_chat_id = message.text.split(' ')[1]
            db.add_user((message.chat.id, message.chat.username, '', 0, ref_chat_id))
        else:
            db.add_user((message.chat.id, message.chat.username, '', 0, -1))
        
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    shop = types.KeyboardButton('üõí –¢–æ–≤–∞—Ä—ã')
    not_pay = types.KeyboardButton('‚ùóÔ∏è–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É‚ùóÔ∏è')
    help = types.KeyboardButton('–ü–æ–º–æ—â—å')
    info = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    profile = types.KeyboardButton('üì± –ü—Ä–æ—Ñ–∏–ª—å')
    ref = types.KeyboardButton('üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
    markup.add(shop, not_pay, profile, ref, info, help)
    if str(message.chat.id) == str(creator_chat_id):
        admin1 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞')
        markup.add(admin1)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: m.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def info(message):
    markup = types.InlineKeyboardMarkup()
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: m.text == 'üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
def ref_system(message):
    ch = db.get_user(message.chat.id)[3]
    markup = types.InlineKeyboardMarkup()
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    link = f't.me/{bot.user.username}?start={message.chat.id}'
    bot.send_message(message.chat.id, f'–£ –Ω–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—à—ë–ª –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Ç–µ–±–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –±–∞–ª–ª—ã, –∞ –ø–æ—Ç–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—É—Ä—Å–æ–≤.\n–≠—Ç–æ —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}\n–°–µ–π—á–∞—Å —É —Ç–µ–±—è –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ –Ω–∞—à–∏—Ö –±–∞–ª–ª–æ–≤: {ch}', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: m.text == '–ü–æ–º–æ—â—å')
def help(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏', url='https://t.me/Ivan_Slezkin'))
    markup.row()
    markup.add(types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close'))
    bot.send_message(message.chat.id, '–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ ‚¨áÔ∏è', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: m.text == '‚ùóÔ∏è–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É‚ùóÔ∏è')
def not_pay(message):
    markup = types.InlineKeyboardMarkup()
    ok = types.InlineKeyboardButton('üí≥ –ö—É–ø–∏—Ç—å –∑–∞ 1499 —Ä—É–±', callback_data='sale')
    promocode = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='enter_promo')
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(ok)
    markup.row()
    markup.add(promocode)
    markup.add(close)
    bot.send_message(message.chat.id, '–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ 1499 —Ä—É–±‚ùóÔ∏è –°–∫–æ—Ä–µ–µ –ø–æ–∫—É–ø–∞–π—Ç–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å', reply_markup=markup)


@bot.callback_query_handler(func=lambda m: m.data == 'enter_promo')
def enter_promo(message):
    global promocodes_users
    bot.delete_message(message.message.chat.id, message.message.message_id)
    promocodes_users.append(message.message.chat.id)
    markup = types.InlineKeyboardMarkup()
    close = types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_enter')
    markup.add(close)
    bot.send_message(message.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:')


@bot.message_handler(content_types=['text'], func=lambda m: m.chat.id in promocodes_users)
def check_promo(message):
    promocode = db.get_promocode(message.text)
    markup = types.InlineKeyboardMarkup()
    close = types.InlineKeyboardButton('üö´ –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_enter')
    markup.add(close)
    if promocode is None:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=markup)
        return
    markup = types.InlineKeyboardMarkup()
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='cancel_enter')
    markup.add(close)
    bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –î–ª—è —Ç–µ–±—è —Å–∫–∏–¥–∫–∞! –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ {promocode[2]} —Ä—É–±, –≤–º–µ—Å—Ç–æ 1499 —Ä—É–±.', reply_markup=markup)
    promocodes_users.remove(message.chat.id)
    prices = []
    user = db.get_user(message.chat.id)
    users_buy = user[2].split('; ')
    if '' in users_buy:
        users_buy.remove('')
    all_results = db.get_info()
    for product in all_results:
        if str(product[0]) not in users_buy:
            price = types.LabeledPrice(label=f'–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É "{product[1]}"', amount=int(product[5]) * 100)
            prices.append(price)
    if prices:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(f"–ó–∞–ø–ª–∞—Ç–∏—Ç—å", pay=True))
        keyboard.add(types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close'))
        prices = [types.LabeledPrice(label=f'–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º', amount=int(promocode[2]) * 100)]
        bot.send_invoice(
            message.chat.id,
            '–î–æ—Å—Ç—É–ø',
            f'–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º', is_flexible=False, prices=prices, provider_token=payment_token, currency="rub", invoice_payload='sale', reply_markup=keyboard, )
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close'))
        bot.send_message(message.chat.id, f'–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ!\n–°—Å—ã–ª–∫–∞: https://disk.yandex.ru/d/fJttnVQnkrmpMA', reply_markup=markup)
    bot.answer_callback_query(message.id)


@bot.callback_query_handler(func=lambda m: m.data == 'cancel_enter')
def cancel_enter(message):
    global promocodes_users
    bot.delete_message(message.message.chat.id, message.message.message_id)
    promocodes_users.remove(message.message.chat.id)
    markup = types.InlineKeyboardMarkup()
    ok = types.InlineKeyboardButton('üí≥ –ö—É–ø–∏—Ç—å –∑–∞ 1499 —Ä—É–±', callback_data='sale')
    promocode = types.InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='enter_promo')
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(ok)
    markup.row()
    markup.add(promocode)
    markup.add(close)
    bot.send_message(message.message.chat.id, '–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ 1499 —Ä—É–±‚ùóÔ∏è –°–∫–æ—Ä–µ–µ –ø–æ–∫—É–ø–∞–π—Ç–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å', reply_markup=markup)


@bot.callback_query_handler(func=lambda m: m.data == 'sale')
def sale(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    prices = []
    user = db.get_user(message.message.chat.id)
    users_buy = user[2].split('; ')
    if '' in users_buy:
        users_buy.remove('')
    all_results = db.get_info()
    for product in all_results:
        if str(product[0]) not in users_buy:
            price = types.LabeledPrice(label=f'–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É "{product[1]}"', amount=int(product[5]) * 100)
            prices.append(price)
    if prices:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(f"–ó–∞–ø–ª–∞—Ç–∏—Ç—å", pay=True))
        keyboard.add(types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close'))
        prices = [types.LabeledPrice(label=f'–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º', amount=149900)]
        bot.send_invoice(
            message.message.chat.id,
            '–î–æ—Å—Ç—É–ø',
            f'–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º', is_flexible=False, prices=prices, provider_token=payment_token, currency="rub", invoice_payload='sale', reply_markup=keyboard, )
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close'))
        bot.send_message(message.message.chat.id, f'–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ!\n–°—Å—ã–ª–∫–∞: https://disk.yandex.ru/d/fJttnVQnkrmpMA', reply_markup=markup)
    bot.answer_callback_query(message.id)
    


@bot.message_handler(content_types=['text'], func=lambda m: m.text == 'üõí –¢–æ–≤–∞—Ä—ã')
def shop(message):
    all_results = db.get_all_users()
    all_users = [i[0] for i in all_results]
    if message.chat.id not in all_users:
        db.add_user((message.chat.id, message.chat.username, '', 0, -1))
    all_results = db.get_all_sections()
    markup = types.InlineKeyboardMarkup()
    for product in all_results:
        button1 = types.InlineKeyboardButton(product[0], callback_data=f'category_{product[1]}')
        markup.add(button1)
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    bot.send_message(message.chat.id, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', reply_markup=markup)


@bot.message_handler(content_types=['text'], func=lambda m: m.text == 'üì± –ü—Ä–æ—Ñ–∏–ª—å')
def profile(message):
    all_results = db.get_all_users()
    all_users = [i[0] for i in all_results]
    if message.chat.id not in all_users:
       db.add_user((message.chat.id, message.chat.username, '', 0, -1))
    user = db.get_user(message.chat.id)
    markup = types.InlineKeyboardMarkup()
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    name = message.chat.first_name
    count = 0
    count_products = 0
    users_buy = user[2].split('; ')
    if '' in users_buy:
        users_buy.remove('')
    for product_name in users_buy:
        product = db.get_info_about_product(product_name)
        count += product[5]
        count_products += 1
    if not name:
        name = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    text = f'üôç‚Äç‚ôÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.first_name}\nüÜî ID: {message.chat.id}\n------------------\nüõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {count_products} —à—Ç.\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {count} —Ä—É–±.'
    bot.send_message(message.chat.id, text, reply_markup=markup)
    

@bot.message_handler(commands=['add'], func=lambda c: str(c.chat.id) == str(creator_chat_id))
def add(message):
    text = message.text.split()
    if not text[1]:
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É–∫–∞–∑–∞–ª–∏ –ª–∏ –í—ã ID —á–µ–ª–æ–≤–µ–∫–∞!')
        return
    user = db.get_user(int(text[1]))
    if not user:
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    markup = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardButton('‚úÖ', callback_data=f'ok_{text[1]}')
    no = types.InlineKeyboardButton('‚ùå', callback_data=f'not_{text[1]}')
    markup.add(yes, no)
    bot.send_message(message.chat.id, f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {text[1]} –≤—Å–µ —Ç–æ–≤–∞—Ä—ã?', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: 'ok_' in c.data)
def add_t(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    markup = types.InlineKeyboardMarkup()
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    all_results = db.get_info()
    products = [i[0] for i in all_results]
    db.update_user_buy('; '.join(products), message.data.replace('ok_', ''))
    bot.send_message(message.message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {message.data.replace("ok_", "")} –≤—ã–¥–∞–Ω–æ {len(products)} —à—Ç —Ç–æ–≤–∞—Ä–æ–≤!', reply_markup=markup)
    bot.answer_callback_query(message.id)
    bot.send_message(message.data.replace('ok_', ''), '‚ùóÔ∏è–í–∞–º –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!‚ùóÔ∏è', reply_markup=markup)
    

@bot.callback_query_handler(func=lambda c: 'not_' in c.data)
def add_t(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    markup = types.InlineKeyboardMarkup()
    close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
    markup.add(close)
    bot.send_message(message.message.chat.id, f'–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=markup)
    bot.answer_callback_query(message.id)


def check_sections(message):
    all_results = db.get_all_sections()
    data = [str(product[1]) for product in all_results]
    if message.data.replace('category_', '') in data and 'category_' in message.data:
        return True
    else:
        return False


def check_products(message):
    all_results = db.get_info()
    data = [str(product[0]) for product in all_results]
    if message.data.replace('product_', '') in data and 'product_' in message.data:
        return True
    else:
        return False


@bot.callback_query_handler(func=check_sections)
def inlin_sections(message):
    section = db.get_section(int(message.data.replace('category_', '')))
    all_results = db.get_products_section(section[1])
    markup = types.InlineKeyboardMarkup(row_width=1)
    count = 0
    buttons = []
    # buy_all = types.InlineKeyboardButton('üí≥ –ö—É–ø–∏—Ç—å –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'cat_{message.data.replace("category_", "")}')
    # markup.add(buy_all)
    for product in all_results:
        button1 = types.InlineKeyboardButton(product[1], callback_data=f'product_{product[0]}')
        buttons.append(button1)
        if count == 2:
            for j in buttons:
                markup.add(j)
            count = 0
            buttons = []
        else:
            count += 1
    for j in buttons:
        markup.add(j)
    button1 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="home")
    markup.add(button1)
    bot.delete_message(message.message.chat.id, message.message.message_id)
    bot.send_message(message.message.chat.id, f'–¢–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{section[0]}" ‚¨áÔ∏è', reply_markup=markup)
    bot.answer_callback_query(message.id)


# @bot.callback_query_handler(func=lambda c: 'cat_' in c.data)
# def buy_category(message):
#     bot.delete_message(message.message.chat.id, message.message.message_id)
#     prices = []
#     user = db.get_user(message.message.chat.id)
#     users_buy = user[2].split('; ')
#     if '' in users_buy:
#         users_buy.remove('')
#     section = db.get_section(message.data.replace('cat_', ''))
#     all_results = db.get_products_section(message.data.replace('cat_', ''))
#     data = [str(i[0]) for i in all_results]
#     links = []
#     for product in all_results:
#         if str(product[0]) not in users_buy:
#             price = types.LabeledPrice(label=f'–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É "{product[1]}"', amount=int(product[5]) * 100)
#             prices.append(price)
#         links.append(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product[0]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product[1]}\n–¶–µ–Ω–∞: {product[3]} —Ä—É–±.\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å "{product[0]}": {product[2]}\n\n')
#     links = "\n".join(links)
#     markup = types.InlineKeyboardMarkup()
#     button1 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîô", callback_data=f'category_{product[5]}')
#     markup.add(button1)
#     if prices:
#         keyboard = types.InlineKeyboardMarkup()
#         keyboard.add(types.InlineKeyboardButton(f"–ó–∞–ø–ª–∞—Ç–∏—Ç—å", pay=True))
#         keyboard.add(types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close'))
#         bot.send_invoice(
#             message.message.chat.id,
#             '–î–æ—Å—Ç—É–ø',
#             f'–î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{section[0]}', is_flexible=False, prices=prices, provider_token=payment_token, currency="rub", invoice_payload='; '.join(data), reply_markup=keyboard, )
#     else:
#         bot.send_message(message.message.chat.id, f'–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n{links}', reply_markup=markup)

@bot.callback_query_handler(func=check_products)
def inlin_product(message):
    markup = types.InlineKeyboardMarkup()
    product = db.get_info_about_product(message.data.replace('product_', ''))
    with open(product[7], 'rb') as file:
        image = file.read()
    buy_products = db.get_user(message.message.chat.id)[2].split('; ')
    if str(product[0]) not in buy_products:
        buy = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å üí≥", callback_data=f"{product[0]}_buy")
        get_free = types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data=f'free_{product[0]}')
        button1 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîô", callback_data=f'category_{product[6]}')
        markup.add(buy, get_free, button1)
    else:
        buy = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"{product[0]}_buy")
        button1 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîô", callback_data=f'category_{product[6]}')
        markup.add(buy, button1)
    bot.delete_message(message.message.chat.id, message.message.message_id)
    bot.send_photo(message.message.chat.id, image, f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n–¶–µ–Ω–∞: ~{product[4]} —Ä—É–±~    *{product[5]} —Ä—É–±*", reply_markup=markup, parse_mode='MarkdownV2')
    bot.answer_callback_query(message.id)


@bot.callback_query_handler(func=lambda c: 'free_' in c.data)
def get_product_free(message):
    markup = types.InlineKeyboardMarkup()
    bot.delete_message(message.message.chat.id, message.message.message_id)
    product = db.get_info_about_product(message.data.replace('free_', ''))
    people_price = product[5] // 50
    ch = db.get_user(message.message.chat.id)[3]
    if ch >= people_price:
        markup.add(types.InlineKeyboardButton('–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å', callback_data=f'get_{message.data.replace("free_", "")}'))
        markup.add(types.InlineKeyboardButton('üîô –ö —Ç–æ–≤–∞—Ä—É', callback_data=f'product_{message.data.replace("free_", "")}'))
        bot.send_message(message.message.chat.id, f'–ú–æ–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞—à–∏–º–∏ –±–∞–ª–ª–∞–º–∏.\n–¢–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç {people_price} –±–∞–ª–ª–∞(–æ–≤), –∞ —É —Ç–µ–±—è {ch} –±–∞–ª–ª–∞(–æ–≤). –ü–æ–∫—É–ø–∞–µ—à—å?', reply_markup=markup)
        return
    else:
        markup.add(types.InlineKeyboardButton('üîô –ö —Ç–æ–≤–∞—Ä—É', callback_data=f'product_{message.data.replace("free_", "")}'))
        bot.send_message(message.message.chat.id, f'–ú–æ–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞—à–∏–º–∏ –±–∞–ª–ª–∞–º–∏.\n–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç {people_price} –±–∞–ª–ª–∞(–æ–≤), –∞ —É —Ç–µ–±—è {ch} –±–∞–ª–ª–∞(–æ–≤). –ü–æ–∫–∞ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —ç—Ç–æ –∫—É–ø–∏—Ç—å. –ó–∞–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, —Å–∫–æ–ø–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –ø–∞—Ä—É –¥—Ä—É–∑–µ–π. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:)', reply_markup=markup)


@bot.callback_query_handler(func=lambda c: 'get_' in c.data)
def buy_product_free(message):
    bot.delete_message(message.message.chat.id, message.message.message_id)
    product = db.get_info_about_product(message.data.replace('get_', ''))
    markup = types.InlineKeyboardMarkup()
    section = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîô', callback_data=f'category_{str(product[6])}')
    home = types.InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω üè†", callback_data="close")
    links = []
    markup.add(section, home)
    user = db.get_user(message.message.chat.id)
    buy_products = user[2].split('; ')
    if '' in buy_products:
        buy_products.remove('')
    if not buy_products and user[4] != -1:
        ref = db.get_user(user[4])
        db.update_user_money(user[4], ref[3] + 1)
    buy_products.append(str(product[0]))
    db.update_user_buy('; '.join(buy_products), message.message.chat.id)
    db.update_user_money(message.message.chat.id, user[3] - (product[5] // 50))
    links.append(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n–¶–µ–Ω–∞: {product[5]} —Ä—É–±.\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å "{product[1]}": {product[3]}\n\n')
    links = "\n".join(links)
    bot.send_message(message.message.chat.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ –±–∞–ª–æ–≤: {user[3] - (product[5] // 50)}\n{links}', reply_markup=markup)

@bot.callback_query_handler(func=lambda c:True)
def inlin(message):
    # data = message.message.json['reply_markup']['inline_keyboard'][0][0]['callback_data']
    if message.data == 'close':
        bot.delete_message(message.message.chat.id, message.message.message_id)
        bot.answer_callback_query(message.id)
    if message.data == 'home':
        bot.delete_message(message.message.chat.id, message.message.message_id)
        all_results = db.get_all_sections()
        markup = types.InlineKeyboardMarkup()
        for product in all_results:
            button1 = types.InlineKeyboardButton(product[0], callback_data=f'category_{product[1]}')
            markup.add(button1)
        close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
        markup.add(close)
        bot.send_message(message.message.chat.id, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', reply_markup=markup)
        bot.answer_callback_query(message.id)
    if message.data == 'cancel_section':
        global add_section_val
        add_section_val = False
        bot.delete_message(message.message.chat.id, message.message.message_id)
        global admin
        admin = True
        markup = types.InlineKeyboardMarkup()
        sections = db.get_all_sections()
        new = types.InlineKeyboardButton('‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='new_section')
        markup.add(new)
        for section in sections:
            b1 = types.InlineKeyboardButton(section[0], callback_data=f'set-adm_{section[1]}')
            markup.add(b1)
        close = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
        markup.add(close)
        bot.send_message(message.message.chat.id, '–≠—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞! –í–æ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=markup)
    if '_buy' in message.data:
        data = message.message.json['reply_markup']['inline_keyboard'][0][0]['callback_data'].replace('_buy', '')
        product = db.get_info_about_product(message.data.replace('_buy', ''))
        buy_products = db.get_user(message.message.chat.id)[2].split('; ')
        if data not in buy_products:
            price = types.LabeledPrice(label=f'–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É "{product[1]}"', amount=int(product[5]) * 100)
            bot.delete_message(message.message.chat.id, message.message.message_id)
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(f"üí≤–ó–∞–ø–ª–∞—Ç–∏—Ç—å", pay=True))
            keyboard.add(types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close'))
            bot.send_invoice(
                message.message.chat.id,
                product[1],
                f'–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É "{product[1]}"', is_flexible=False, prices=[price], provider_token=payment_token, currency="rub", invoice_payload=product[0], reply_markup=keyboard)
        else:
            markup = types.InlineKeyboardMarkup()
            section = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîô', callback_data=f'category_{product[6]}')
            home = types.InlineKeyboardButton('üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
            markup.add(section, home)
            bot.delete_message(message.message.chat.id, message.message.message_id)
            bot.send_message(message.message.chat.id, f'–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç –∫—É—Ä—Å! –í–æ—Ç —Å—Å—ã–ª–∫–∞: {product[3]}', reply_markup=markup)
        bot.answer_callback_query(message.id)


@bot.pre_checkout_query_handler(lambda h: True)
def good(message):
    bot.answer_pre_checkout_query(message.id, ok=True)


@bot.message_handler(content_types=['successful_payment'])
def good(message):
    if message.successful_payment.invoice_payload != 'sale':
        bot.delete_message(message.chat.id, message.message_id)
        product = db.get_info_about_product(message.successful_payment.invoice_payload)
        markup = types.InlineKeyboardMarkup()
        section = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üîô', callback_data=f'category_{str(product[6])}')
        home = types.InlineKeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω üè†", callback_data="close")
        links = []
        markup.add(section, home)
        user = db.get_user(message.chat.id)
        buy_products = user[2].split('; ')
        if '' in buy_products:
            buy_products.remove('')
        if not buy_products and user[4] != -1:
            ref = db.get_user(user[4])
            db.update_user_money(user[4], ref[3] + 1)
        buy_products.append(str(product[0]))
        db.update_user_buy('; '.join(buy_products), message.chat.id)
        links.append(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n–¶–µ–Ω–∞: {product[5]} —Ä—É–±.\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å "{product[1]}": {product[3]}\n\n')
        links = "\n".join(links)
        bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n{links}', reply_markup=markup)
    else:
        bot.delete_message(message.chat.id, message.message_id)
        markup = types.InlineKeyboardMarkup()
        home = types.InlineKeyboardButton("üö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
        links = []
        for product in db.get_info():
            user = db.get_user(message.chat.id)
            buy_products = user[2].split('; ')
            if str(product[0]) not in buy_products:
                buy_products.append(str(product[0]))
            if '' in buy_products:
                buy_products.remove('')
            if not buy_products and user[4] != -1:
                ref = db.get_user(user[4])
                db.update_user_money(user[4], ref[3] + 1)
            db.update_user_buy('; '.join(buy_products), message.chat.id)
        markup.add(home)
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n–°—Å—ã–ª–∫–∞: https://disk.yandex.ru/d/fJttnVQnkrmpMA', reply_markup=markup)

bot.infinity_polling(skip_pending = True)
